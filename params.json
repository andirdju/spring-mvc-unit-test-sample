{"name":"Spring-mvc-unit-test-sample","tagline":"Samples for spring mvc unit test","body":"### Spring MVC Unit Test Sample\r\n\r\n#### Overview\r\nFluent api, enable testing of controller as `controller`, not just as a method (think request mapping).\r\n\r\nSee the full presentation from springsource [here](https://www.youtube.com/watch?v=K6x8LE7Qd1Q \"Webinar: Testing Web Applications with Spring 3.2\").\r\n\r\nGet the sample codes (NOT for the springsource presentation) [here](https://github.com/andirdju/spring-mvc-unit-test-sample \"GitHub - andirdju - spring-mvc-unit-test-sample\").\r\n\r\n#### Details\r\n##### Unit Test (standalone) vs Integration Test\r\nI would say this is a unit test because we will mock the `collborators`, although we also have the option to not mock the `collaborators` thus doing something like an integration test.\r\n\r\nIn the spirit of unit-testing, I personally prefer to do standalone testing on the controller, by mocking the `collaborators` and testing one controller at a time.\r\n\r\n##### DispatcherServlet runtime (so we can test request mapping)\r\nIt will handle the creation of `DispatcherServlet` runtime for the test, so we can also test the mvc wiring, not just the inner workings of the methods.\r\n\r\nWe won't call the controller methods directly. Instead we will create a mock request and pass it to the provided [mvc test infrastructure](http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/MockMvc.html \"MockMvc\"). \r\n\r\n##### MockMvc and other usefull mocks\r\nClasses in `org.springframework.test.web.servlet.*`\r\nCheck for yourself [here](http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/test/web/servlet/package-summary.html \"Contains server-side support for testing Spring MVC applications\").\r\n\r\n\r\n##### Assertions\r\nWe have several options for asserting, either manually asserting the `response` result and/or the `ModelAndView` object, or using the springframework api.\r\n\r\nFor asserting the result manually, I would prefer asserting the `ModelAndView`, instead of the `response` result.\r\n\r\nI think asserting the `response` result would only be realistic if our controllers are json/xml web service endpoints. I don't feel like asserting html markup...\r\n\r\nAsserting the `response` result is also not supported if the rendering technology is `jsp` (not running in a servlet container). Freemarker, Velocity, Xslt, etc, is supported. Another reason not to use `jsp`?\r\n\r\n##### Fluent api\r\nApi that looks like a `builder` pattern.\r\n\r\n##### Sample from springsource presentation and ref docs\r\nCreating Standalone Unit Test\r\n\r\n    ...\r\n    import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;\r\n    ...\r\n    @InjectMocks\r\n    private HomeController homeController;\r\n    ...\r\n    @Mock\r\n    private TimeService timeService;\r\n    ...\r\n    @Before\r\n    public void before() {\r\n        ...\r\n        this.mockMvc = standaloneSetup(this.homeController).build();\r\n    }\r\n    ...\r\n\r\nFluent Api\r\n\r\n    ...\r\n    import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\r\n    import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n    ...\r\n    @Test\r\n    public void homeTest() throws Exception {\r\n        // note: we don't call the controller method manually here!\r\n        this.mockMvc.perform(get(HomeControllerTest.PATH)).andExpect(\r\n            status().isOk());\r\n        ...\r\n    }\r\n    ...\r\n\r\nAccess to underlying request, response, ModelAndView object\r\n\r\n    ...\r\n    import static org.springframework.test.web.ModelAndViewAssert.assertModelAttributeValue;\r\n    import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\r\n    import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n    ...\r\n    @Test\r\n    public void homeAssertMavTest() throws Exception {\r\n        // note: we don't call the controller method manually here!\r\n        MvcResult mvcResult = this.mockMvc.perform(get(HomeControllerTest.PATH)).andReturn();\r\n        ...\r\n        ModelAndView modelAndView = mvcResult.getModelAndView();\r\n        MockHttpServletRequest request = mvcResult.getRequest();\r\n        MockHttpServletResponse response = mvcResult.getResponse();\r\n        ...    \r\n        // assertions\r\n        ...\r\n        // spring mvc ModelAndView specific assertion\r\n        assertModelAttributeValue(modelAndView, HomeControllerTest.SERVER_TIME,\r\n            HomeControllerTest.EN_RESULT);\r\n        ...\r\n    }\r\n    ...\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}